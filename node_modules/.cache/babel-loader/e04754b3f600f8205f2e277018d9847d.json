{"ast":null,"code":"var _jsxFileName = \"/home/puumalao/Projects/OAMK/3. Year/Cloud Integration/quiz-project-frontend/src/QuizGame.js\";\nimport React, { Component } from \"react\";\nimport ClockForGame from \"./ClockForGame\";\nimport { Button, Card } from \"react-bootstrap\";\n\nclass QuizGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      gameOver: false,\n      questionId: undefined,\n      question: undefined,\n      answers: undefined,\n      category: undefined,\n      difficulty: undefined,\n      points: 0,\n      sessionId: undefined\n    };\n  }\n\n  componentDidMount() {\n    let sessionId = sessionStorage.getItem('session_id');\n    this.startGameSession();\n    this.checkIfSessionIsValid();\n  }\n\n  startGameSession() {\n    console.log(\"START\");\n    let urlAddress = \"http://localhost:5000/api/start_game_session\";\n    fetch(urlAddress, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      console.log(\"DATA\", data);\n      if (data.hasOwnProperty('session_id')) sessionStorage.setItem('session_id', data.session_id);\n      this.props.history.push('/quizgame');\n    }).catch(error => {\n      console.log(error);\n      alert(\"Try again :)\");\n    });\n  }\n\n  async checkIfSessionIsValid() {\n    let sessionId = sessionStorage.getItem('session_id');\n\n    if (sessionId) {\n      this.setState({\n        sessionId: sessionId\n      });\n      await this.getRandomQuestion();\n    } else {\n      this.props.history.push('/');\n    }\n\n    console.log(\"SESSIONID\", sessionId);\n  }\n\n  getRandomQuestion() {\n    let sessionIdentifier = [];\n    let sessionId = sessionStorage.getItem('session_id');\n    console.log(\"SESSIONID\", sessionId.length);\n    sessionIdentifier['session_id'] = sessionId;\n    console.log(\"SE\", sessionIdentifier);\n    let urlAddress = \"http://localhost:5000/api/get_random_question\";\n    fetch(urlAddress, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        Authorization: sessionId\n      }\n    }).then(function (response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.hasOwnProperty('question') && data.hasOwnProperty('difficulty') && data.hasOwnProperty('answers') && data.hasOwnProperty('_id') && data.hasOwnProperty('category')) {\n        console.log(\"Received response\", data);\n        this.setState({\n          question: this.htmlEntities(data.question),\n          difficulty: data.difficulty,\n          answers: data.answers,\n          questionId: data._id,\n          category: data.category,\n          isLoading: false\n        });\n      } else {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  async checkCorrectAnswer(itm) {\n    let jsonStr = {};\n    let body = {\n      question_id: this.state.questionId,\n      correct_answer: itm,\n      session_id: this.state.sessionId\n    };\n    jsonStr['_id'] = this.state.questionId;\n    jsonStr['correct_answer'] = itm;\n    console.log(jsonStr);\n    await this.checkJsonObjectFromApi(body);\n    this.newQuestion();\n  }\n\n  checkJsonObjectFromApi(jsonStr) {\n    console.log(jsonStr);\n    let sessionId = sessionStorage.getItem('session_id');\n    let urlAddress = \"http://localhost:5000/api/check_correct_answer\";\n    fetch(urlAddress, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': sessionId\n      },\n      body: JSON.stringify(jsonStr)\n    }).then(function (response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      console.log(\"CURRENT\", data);\n      this.markCorrectWrongForUser(data);\n    });\n  }\n\n  markCorrectWrongForUser(data) {\n    if (data.hasOwnProperty('current_score')) {\n      this.setState({\n        points: data.current_score\n      });\n    }\n  }\n\n  htmlEntities(encodedString) {\n    let translate_re = /&(nbsp|amp|quot|lt|gt);/g;\n    let translate = {\n      \"nbsp\": \" \",\n      \"amp\": \"&\",\n      \"quot\": \"\\\"\",\n      \"lt\": \"<\",\n      \"gt\": \">\"\n    };\n    return encodedString.replace(translate_re, function (match, entity) {\n      return translate[entity];\n    }).replace(/&#(\\d+);/gi, function (match, numStr) {\n      let num = parseInt(numStr, 10);\n      return String.fromCharCode(num);\n    });\n  }\n\n  getQuestionContent() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: '25rem',\n        height: '350px',\n        margin: '0 auto',\n        padding: '2rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.state.question), React.createElement(Card.Subtitle, {\n      className: \"mb-2 text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Category: \", this.state.category), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Difficulty: \", this.state.difficulty), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Points: \", this.state.points))));\n  }\n\n  getAnswerData() {\n    if (this.state.answers) {\n      return this.state.answers.map((itm, i) => {\n        return React.createElement(Button, {\n          key: i,\n          variant: \"outline-success\",\n          size: \"sm\",\n          block: true,\n          onClick: () => this.checkCorrectAnswer(itm),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, itm);\n      });\n    }\n\n    console.log(this.state.answers);\n  }\n\n  newQuestion() {\n    this.setState({\n      isLoading: false\n    });\n    this.getRandomQuestion();\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"quizH\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Quiz Game\"), this.getQuestionContent(), React.createElement(ClockForGame, {\n      score: this.state.points,\n      sessionId: sessionStorage.getItem('session_id'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gameAnswerButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.getAnswerData()));\n  }\n\n}\n\nexport default QuizGame;","map":{"version":3,"sources":["/home/puumalao/Projects/OAMK/3. Year/Cloud Integration/quiz-project-frontend/src/QuizGame.js"],"names":["React","Component","ClockForGame","Button","Card","QuizGame","constructor","props","state","isLoading","gameOver","questionId","undefined","question","answers","category","difficulty","points","sessionId","componentDidMount","sessionStorage","getItem","startGameSession","checkIfSessionIsValid","console","log","urlAddress","fetch","method","headers","then","response","ok","Error","statusText","json","data","hasOwnProperty","setItem","session_id","history","push","catch","error","alert","setState","getRandomQuestion","sessionIdentifier","length","Accept","Authorization","htmlEntities","_id","checkCorrectAnswer","itm","jsonStr","body","question_id","correct_answer","checkJsonObjectFromApi","newQuestion","JSON","stringify","markCorrectWrongForUser","current_score","encodedString","translate_re","translate","replace","match","entity","numStr","num","parseInt","String","fromCharCode","getQuestionContent","width","height","margin","padding","getAnswerData","map","i","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport ClockForGame from \"./ClockForGame\";\nimport {Button, Card} from \"react-bootstrap\";\n\nclass QuizGame extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            gameOver: false,\n            questionId: undefined,\n            question: undefined,\n            answers: undefined,\n            category: undefined,\n            difficulty: undefined,\n            points: 0,\n            sessionId: undefined,\n        }\n    }\n    componentDidMount(){\n        let sessionId = sessionStorage.getItem('session_id');\n\n        this.startGameSession();\n        this.checkIfSessionIsValid();\n    }\n\n    startGameSession() {\n        console.log(\"START\");\n        let urlAddress = \"http://localhost:5000/api/start_game_session\";\n        fetch(urlAddress, {\n            method: 'POST',\n            headers: {\n                'Accept' : 'application/json',\n                'Content-Type': 'application/json'\n\n            },\n        })\n            .then(function (response) {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response;\n            })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"DATA\", data);\n                if(data.hasOwnProperty('session_id'))\n                    sessionStorage.setItem('session_id', data.session_id);\n                this.props.history.push('/quizgame');\n            })\n            .catch((error) => {\n                console.log(error);\n                alert(\"Try again :)\");\n            });\n    }\n\n\n    async checkIfSessionIsValid() {\n        let sessionId = sessionStorage.getItem('session_id');\n        if (sessionId) {\n            this.setState({\n                sessionId: sessionId\n            });\n            await this.getRandomQuestion();\n        } else {\n            this.props.history.push('/');\n        }\n        console.log(\"SESSIONID\", sessionId);\n    }\n\n    getRandomQuestion() {\n        let sessionIdentifier = [];\n        let sessionId = sessionStorage.getItem('session_id');\n        console.log(\"SESSIONID\", sessionId.length);\n        sessionIdentifier['session_id'] = sessionId;\n        console.log(\"SE\", sessionIdentifier);\n        let urlAddress = \"http://localhost:5000/api/get_random_question\";\n        fetch(urlAddress, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                Authorization: sessionId,\n            },\n        })\n            .then(function (response) {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response;\n            })\n            .then(response => response.json())\n            .then(data => {\n               if(data.hasOwnProperty('question') &&\n                   data.hasOwnProperty('difficulty') &&\n                   data.hasOwnProperty('answers') &&\n                   data.hasOwnProperty('_id') &&\n                   data.hasOwnProperty('category')\n               ) {\n                   console.log(\"Received response\", data);\n\n                   this.setState({\n                       question: this.htmlEntities(data.question),\n                       difficulty: data.difficulty,\n                       answers: data.answers,\n                       questionId: data._id,\n                       category: data.category,\n                       isLoading: false,\n                   });\n               } else {\n                   console.log(\"error\");\n               }\n\n            });\n    }\n\n    async checkCorrectAnswer(itm) {\n        let jsonStr = {};\n        let body ={\n            question_id: this.state.questionId,\n            correct_answer: itm,\n            session_id: this.state.sessionId,\n        };\n        jsonStr['_id'] = this.state.questionId;\n        jsonStr['correct_answer'] = itm;\n        console.log(jsonStr);\n        await this.checkJsonObjectFromApi(body);\n        this.newQuestion();\n    }\n\n    checkJsonObjectFromApi(jsonStr) {\n        console.log(jsonStr);\n        let sessionId = sessionStorage.getItem('session_id');\n        let urlAddress = \"http://localhost:5000/api/check_correct_answer\";\n        fetch(urlAddress, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': sessionId,\n\n            },\n            body: JSON.stringify(jsonStr)\n        })\n            .then(function (response) {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response;\n            })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"CURRENT\", data);\n                this.markCorrectWrongForUser(data)\n            })\n    }\n\n    markCorrectWrongForUser(data) {\n        if(data.hasOwnProperty('current_score')) {\n            this.setState({\n                points: data.current_score,\n            });\n        }\n    }\n\n    htmlEntities(encodedString) {\n        let translate_re = /&(nbsp|amp|quot|lt|gt);/g;\n        let translate = {\n            \"nbsp\":\" \",\n            \"amp\" : \"&\",\n            \"quot\": \"\\\"\",\n            \"lt\"  : \"<\",\n            \"gt\"  : \">\"\n        };\n        return encodedString.replace(translate_re, function(match, entity) {\n            return translate[entity];\n        }).replace(/&#(\\d+);/gi, function(match, numStr) {\n            let num = parseInt(numStr, 10);\n            return String.fromCharCode(num);\n        });\n    }\n\n    getQuestionContent() {\n        return(<div>\n            <Card style={{ width: '25rem', height: '350px', margin: '0 auto', padding: '2rem' }}>\n                <Card.Body>\n                    <Card.Title>{this.state.question}</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">Category: {this.state.category}</Card.Subtitle>\n                    <Card.Text>\n                        Difficulty: {this.state.difficulty}\n                    </Card.Text>\n                    <Card.Text>\n                        Points: {this.state.points}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n\n        </div>)\n    }\n\n    getAnswerData() {\n        if(this.state.answers) {\n            return this.state.answers.map((itm, i) => {\n               return(<Button key={i} variant={\"outline-success\"} size={\"sm\"} block  onClick={() => this.checkCorrectAnswer(itm)}>{itm}</Button>)\n            });\n        }\n        console.log(this.state.answers);\n    }\n\n    newQuestion() {\n        this.setState({\n            isLoading: false\n        });\n        this.getRandomQuestion();\n    }\n\n    render() {\n        if(this.state.isLoading){\n            return(<div>\n                <h1>Loading...</h1>\n            </div>)\n        }\n        return (\n            <div>\n                <h1 className={\"quizH\"}>Quiz Game</h1>\n                {this.getQuestionContent()}\n                <ClockForGame\n                score = {this.state.points}\n                sessionId = {sessionStorage.getItem('session_id')}\n                />\n                <div className={\"gameAnswerButtons\"}>\n                {this.getAnswerData()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default QuizGame\n"]},"metadata":{},"sourceType":"module"}